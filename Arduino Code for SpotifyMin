Download MFRC522.h 

#include <SPI.h>
#include <MFRC522.h>

#define RST_PIN 8
#define SS_PIN 10

MFRC522 mfrc522(SS_PIN, RST_PIN);

int p = 7;         // Play Button
int Next = 4;      // Next Button
int Previous = 2;  // Previous Button
int potPin = A5;   // Volume
int r = 6;
int g = 3;
int b = 5;
int cd = 9;

bool playPauseState = false;
bool lastButtonState = LOW;

void setup() {
  Serial.begin(9600);
  SPI.begin();
  mfrc522.PCD_Init();
  Serial.println("Scan an RFID tag");

  pinMode(p, INPUT);
  pinMode(Next, INPUT);
  pinMode(Previous, INPUT);
  pinMode(potPin, INPUT);
}

void loop() {
  // Look for new cards
  if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    // Show some details of the PICC (that is: the tag/card)
    Serial.print("UID tag: ");
    String content = "";
    for (byte i = 0; i < mfrc522.uid.size; i++) {
      content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? "0" : ""));
      content.concat(String(mfrc522.uid.uidByte[i], HEX));
    }
    content.toUpperCase();
    Serial.println(content);

    if (content == "35B4E015") {  // Replace with actual UID
      Serial.println("Rebirth");
      delay(1000);  // Wait a second before reading again
    } else if (content == "05ECF3D1") {  // Replace with actual UID
      Serial.println("Death");
      delay(1000);  // Wait a second before reading again
    }
  }

  // Push Button Switch for cd
  bool currentButtonState = digitalRead(p);
  if (currentButtonState != lastButtonState) {
    if (currentButtonState == HIGH) {
      playPauseState = !playPauseState;
      if (playPauseState) {
        analogWrite(cd, 150);
      } else {
        analogWrite(cd, 0);
      }
      delay(50); // Debounce delay
    }
    lastButtonState = currentButtonState;
  }

  // Check if the play/pause button is pressed
  if (digitalRead(p) == HIGH) {
    Serial.println("play_pause");
    delay(500); // Wait to avoid repeated triggering
  }

  // Check if the next track button is pressed
  if (digitalRead(Next) == HIGH) {
    Serial.println("next_track");
    delay(500); // Wait to avoid repeated triggering
  }

  // Check if the previous track button is pressed
  if (digitalRead(Previous) == HIGH) {
    Serial.println("previous_track");
    delay(500); // Wait to avoid repeated triggering
  }

  // Read the potentiometer value
  int potValue = analogRead(potPin);
  int volume = map(potValue, 0, 1023, 0, 100);

  // Send volume control command only if there's a significant change
  static int lastVolume = -1; // Variable to store the last mapped volume
  if (abs(volume - lastVolume) > 2) { // Adjust threshold to avoid noise
    Serial.print("volume:");
    Serial.println(volume);
    lastVolume = volume;
  }

  if (volume > 90) //Teal
  {
    analogWrite(r,255);
    analogWrite(g,130);
    analogWrite(b,130);
  }
  else if (volume > 70)  //Purple
  {
    analogWrite(r,225);
    analogWrite(g,255);
    analogWrite(b,15);
  }
  else if (volume > 50) //Green
  {
    analogWrite(r,255);
    analogWrite(g,0);
    analogWrite(b,255);
  }
  else if (volume > 30) //Blue
  {
    analogWrite(r,255);
    analogWrite(g,255);
    analogWrite(b,0);
  }
  else if (volume > 10) //Yellow
  {
    analogWrite(r,0);
    analogWrite(g,63);
    analogWrite(b,52);
  }
  else if (volume > 0) //Orange
  {
    analogWrite(r,0);
    analogWrite(g,150);
    analogWrite(b,255);
  }
  else if (volume == 0) //Red
  {
    analogWrite(r,0);
    analogWrite(g,255);
    analogWrite(b,255);
  }
  delay(100); // Adjust delay as needed
}
